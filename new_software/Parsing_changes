Supervisor's Approach (Broadcast Raw File Data)

    Step-by-Step Workflow:

        Step 1 (Existence Check):

            Root checks if the file exists and gets its size.

            Root broadcasts:

                A flag (1 if file exists, 0 if not).

                The file size in bytes.

        Step 2 (Broadcast Raw Data):

            If the file exists, root reads the raw file content (as bytes) and broadcasts it to all nodes.

            All nodes parse the broadcasted data into key-value pairs independently.


<----------------------PROPOSED CODE------------------------------->


subroutine read_and_broadcast_steering_file(no_co, success)
  type(t_node_conf), intent(in) :: no_co
  logical, intent(out) :: success
  integer :: file_exists, file_size, ierr
  character(:), allocatable :: file_content

  ! Step 1: Root checks file existence and size
  if (root(no_co)) then
    inquire(file=steering_filename, exist=file_exists, size=file_size)
    if (.not. file_exists) file_size = 0
  endif

  ! Broadcast existence and size
  call MPI_BCAST(file_exists, 1, MPI_INTEGER, 0, no_co%comm, ierr)
  call MPI_BCAST(file_size, 1, MPI_INTEGER, 0, no_co%comm, ierr)

  if (file_exists == 0) then
    success = .false.
    return
  endif

  ! Step 2: Root reads file and broadcasts content
  if (root(no_co)) then
    allocate(character(file_size) :: file_content)
    open(unit=10, file=steering_filename, access='stream', form='unformatted')
    read(10) file_content
    close(10)
  else
    allocate(character(file_size) :: file_content)
  endif

  ! Broadcast raw bytes
  call MPI_BCAST(file_content, file_size, MPI_CHARACTER, 0, no_co%comm, ierr)

  ! Step 3: All nodes parse the file content
  call parse_steering_data(file_content, success)

  deallocate(file_content)
end subroutine