!----------------------------------------------------------------------------------------- !*!
! Steering modules 
!----------------------------------------------------------------------------------------- !*!

!-----------------------------------------------------------------------------------------
subroutine setup_diag_report_list( list, spec_name, path, rep_type, interpolation, label_prefix ) !*!
!-----------------------------------------------------------------------------------------
  use m_restart
  use m_vdf_define

  implicit none

  type( t_vdf_report ), pointer :: list
  character(len=*), intent(in) :: spec_name, path
  integer, intent(in) :: rep_type
  integer, intent(in) :: interpolation
  character(len=*), optional, intent(in) :: label_prefix

  character(len=64) :: prefix
  type( t_vdf_report ), pointer :: report
  real(p_double) :: interp_offset
  integer, parameter :: izero = ichar('0')

  if ( present(label_prefix )) then
    prefix = trim(label_prefix) // " "
  else
    prefix = ''
  endif

  select case( interpolation )
  case( p_linear, p_cubic )
    interp_offset = 0.0_p_double
  case( p_quadratic, p_quartic )
    interp_offset = 0.5_p_double
  case default
    interp_offset = 0.0_p_double
    ERROR('Interpolation value not supported')
    call abort_program(p_err_invalid)
  end select

  report => list
  do
    if ( .not. associated( report ) ) exit

    report%fileLabel = replace_blanks(trim(spec_name))
    report%basePath  = trim(path_mass) // trim(path) // p_dir_sep // &
             trim(report%fileLabel) // p_dir_sep

    report%xname  = (/'x1', 'x2', 'x3'/)
    report%xlabel = (/'x_1', 'x_2', 'x_3'/)
    report%xunits = (/'c / \omega_p', 'c / \omega_p', 'c / \omega_p'/)

    ! these are just dummy values for now
      report%time_units = '1 / \omega_p'
      report%dt         = 1.0

      ! set default units
      report%units  = 'n_0'

      ! set units and labels
      select case ( rep_type )
      case ( p_rep_type_dens )

        select case ( report%quant )
        case(p_charge)
          if ( p_x_dim == 1 ) then
            report%units  = 'e \omega_p / c'
          else
            report%units  = 'e \omega_p^'//char(izero+p_x_dim)// &
                            '/ c^'//char(izero+p_x_dim)
          endif
          report%label = '\rho'
          report%offset_t = 0.0_p_double
        case(p_mass)
          report%label = 'm'
          report%offset_t = 0.0_p_double
        case(p_ene)
          report%label = 'Kinetic Energy'
          report%offset_t = -0.5_p_double
        case(p_q1)
          report%label = 'q_1'
          report%offset_t = -0.5_p_double
        case(p_q2)
          report%label = 'q_2'
          report%offset_t = -0.5_p_double
        case(p_q3)
          report%label = 'q_3'
          report%offset_t = -0.5_p_double
        case(p_j1)
          report%label = 'j_1'
          report%offset_t = -0.5_p_double
        case(p_j2)
          report%label = 'j_2'
          report%offset_t = -0.5_p_double
        case(p_j3)
          report%label = 'j_3'
          report%offset_t = -0.5_p_double
        end select

      case ( p_rep_type_udist )

        select case ( report%quant )
        case(p_ufl1)
          report%label = 'u_{fl1}'
          report%units = 'c'
        case(p_ufl2)
          report%label = 'u_{fl2}'
          report%units = 'c'
        case(p_ufl3)
          report%label = 'u_{fl3}'
          report%units = 'c'
        case(p_uth1)
          report%label = 'u_{th1}'
          report%units = 'c'
        case(p_uth2)
          report%label = 'u_{th2}'
          report%units = 'c'
        case(p_uth3)
          report%label = 'u_{th3}'
          report%units = 'c'
        case(p_T11)
          report%label = 'T_{11}'
          report%units = 'm c^2'
        case(p_T22)
          report%label = 'T_{22}'
          report%units = 'm c^2'
        case(p_T33)
          report%label = 'T_{33}'
          report%units = 'm c^2'
        case(p_T12)
          report%label = 'T_{12}'
          report%units = 'm c^2'
        case(p_T13)
          report%label = 'T_{13}'
          report%units = 'm c^2'
        case(p_T23)
          report%label = 'T_{23}'
          report%units = 'm c^2'
       end select

       report%offset_t = -0.5_p_double

      end select

      report % label = trim(prefix) // trim(report % label)
      report%offset_x = (/ 0.0_p_double, 0.0_p_double, 0.0_p_double /) + interp_offset

      report => report%next
    enddo
    
    report => report%next
  enddo
  
end subroutine setup_diag_report_list
!-----------------------------------------------------------------------------------------

!-----------------------------------------------------------------------------------------
subroutine reinit_diag_species(diag, name, interp, id) !*!
!-----------------------------------------------------------------------------------------

  use m_species_diagnostics
  use m_species_phasespace
  use m_parameters

  use stringutil
  use m_fparser

  use m_restart
  use m_logprof
  
  implicit none
  class(t_diag_species), intent(inout) :: diag
  character(*), intent(in) :: name
  integer, intent(in) :: interp, id

  select case (id)
    case (1)  ! Main density reports
      call setup_diag_report_list(diag%reports, name, 'DENSITY', p_rep_type_dens, interp)
      
    case (2)  ! Cell-averaged reports
      call setup_diag_report_list(diag%rep_cell_avg, name, 'CELL_AVG', p_rep_type_dens, interp, &
                                  label_prefix = 'Cell average')
      
    case (3)  ! Momentum distribution reports
      call setup_diag_report_list(diag%rep_udist, name, 'UDIST', p_rep_type_udist, interp)
      
    case default
      print *, "(*error*) Invalid id for reinit_diag_species: ", id
      return
  end select
end subroutine reinit_diag_species
!-----------------------------------------------------------------------------------------