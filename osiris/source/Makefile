# Configuration files
# (this includes the configuration generated by the configure tool)
#     Sometimes (for out-of-scource builds), a custom configuration (i.e. 'osiris_config') file is needed.
#       The path to this custom file in the 'OSIRIS_BUILD_CONFIGURATION_FILE' environment variable.
#       If that variable is not set, then use the default: '../config/osiris_config '
OSIRIS_BUILD_CONFIGURATION_FILE?=../config/osiris_config
configfile=$(OSIRIS_BUILD_CONFIGURATION_FILE)

include config.mk
include config.mk.warnings

# Set the flag defining that we are in the top level makefile
toplevel = 1

# Main binary name
osiris = $(builddir)/osiris.$(BIN_EXT)

# Build directory
# It must be set to a directory other than '.' (local source dir)
builddir?=build
bindir?=../bin

# Copy operation for copying binary to bindir
# This should be set to ditto for ARM Macs
CP_OP?=cp

# exe name and symlink to exe
OSIRIS_BIN=$(bindir)/osiris-$(VERSION)-$(OS_DIM)D"$(BRANCH_SUFFIX)".$(BIN_EXT)
OSIRIS_BIN_LINK=$(bindir)/osiris-$(OS_DIM)D"$(BRANCH_SUFFIX)".$(BIN_EXT)

#-----------------------------------------------------------------------------------------
# OSIRIS source files
#
# Source files must be defined in sequence (we may write a tool to generate dependencies
# in the future)
# To include source code from subdirectories we include the Makefiles from each directory

src  =  os-stringutil.f90

include system/Makefile

# FFT library code.
include fft/Makefile

src +=  os-param.f90 os-units.f90 os-math.f90 os-input-file.f03 os-util.f90

include memory/Makefile

include dutil/Makefile

include zdf/Makefile

include restart/Makefile

src +=  os-logprof.f90  os-nconf.f03  os-fparser.f90  \
        os-space.f90    os-tstep.f90  os-time.f90

include grid/Makefile

include random/Makefile

# output_formats_src is set in 'dutil/Makefile'
src += $(output_formats_src)


include vdf/Makefile

src +=  os-timeavg.f90

include current/Makefile

include emf/Makefile

include spec/Makefile

src +=  os-cathode.f03 \
        os-cross.f90 os-dneutral.f90 os-neutral.f03 \
        os-antenna.f90 os-antenna_array.f90

include zpulse/Makefile

src += os-bnd.f03

include particles/Makefile

src += os-simulation.f03 os-dynloadbalance.f03

# SIMD code
include simd/Makefile

# simulation factory
src += os-simulation-factory.f03

# Main file
src += os-main.f03

# Optional Python wrapper
-include Makefile.wrapper

# To make the build info passed into Osiris
-include Makefile.config-info

#-----------------------------------------------------------------------------------------

# Parse source files to get object files
objs := $(patsubst %.f90,$(builddir)/%.o,$(src))
objs := $(patsubst %.f03,$(builddir)/%.o,$(objs))
objs := $(patsubst %.c,  $(builddir)/%.o,$(objs))
objs := $(patsubst %.cpp,$(builddir)/%.o,$(objs))

# ----------------------------------------------------------------------------------------
# Targets and rules
.DEFAULT_GOAL := $(osiris)

$(osiris) : $(builddir) gen-config-info $(objs)
	@echo "[LINK] $(@F)"
	@cd $(builddir) && $(F90)  $(F90F) -I$(builddir) -o $(notdir $(osiris)) $(notdir $(objs)) $(LDF)
	@chmod 755 $@
	@echo "Copying binary to $(OSIRIS_BIN)"
	@$(CP_OP) $@ "$(OSIRIS_BIN)"
	@echo "Creating symbolic link"
	@ln -f -s $(OSIRIS_BIN) $(OSIRIS_BIN_LINK)
	@echo "Done!"

$(objs) : $(configfile) | $(builddir)

# create the build directory
$(builddir):
	@echo Creating $@ directory
	@mkdir -p $@
	@mkdir -p $@/preprocessed

$(builddir)/%.o : %.f03
	@echo "[F03] $(<F)"
	@$(FPP) $(FPPF) -I. -I$(builddir) $< > $(builddir)/$(<F)
	@cd $(builddir) && $(F03) $(F90F) $(INCPATH) -c $(F03_EXTENSION_FLAG) $(<F)
	@cd $(builddir) && mv $(<F) ./preprocessed

$(builddir)/%.o: %.f90
	@echo "[F90] $(<F)"
	@$(FPP) $(FPPF) -I. -I../source $< > $(builddir)/$(<F)
	@cd $(builddir) && $(F90) $(F90F) $(INCPATH) -c $(<F)
	@cd $(builddir) && mv $(<F) ./preprocessed
#	@$(F90) $(F90F) $(INCPATH) -J$(builddir) -c $(builddir)/$(<F) -o $@

$(builddir)/%.o : %.c
	@echo "[CC] $(<F)"
	@$(cc) $(CF) $(INCPATH) -I. -c $< -o $@

$(builddir)/%.o : %.cpp
	@echo "[C++] $(<F)"
	@$(cc) $(CPPF) $(MPI_FCOMPILEFLAGS) $(INCPATH) -I. -std=c++0x -c $< -o $@

clean:
	@echo "[CLEAN] Removing build directory"
	@rm -rf $(builddir)

# ----------------------------------------------------------------------------------------
# Additional Targets

# I/O Performance test tool
include ioperf/Makefile
