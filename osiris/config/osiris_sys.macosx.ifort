##########################################################################################
# System specific configuration for OSIRIS
#   System:    Mac OS X / darwin
#   Compilers: Intel family ( icc, ifort )
##########################################################################################

##########################################################################################
# OSIRIS configuration

# Set the following to a system optimized timer, or leave commented to use a default one
TIMER = __MACH_TIMER__

# SIMD
# Uncomment one of the following lines to enable SSE / AVX optimized code
#SIMD = SSE
SIMD = AVX

# Numeric precision (SINGLE|DOUBLE)
PRECISION = SINGLE
#PRECISION = DOUBLE

##########################################################################################
# Compilers

F90 = ifort
F03 = ifort -stand f03 -free
FPP = gcc -C -E -x assembler-with-cpp
cc  = icc
CC  = icc

F90FLAGS_all = -fpp -diag-disable 5117

# Fortran preprocessor
FPP = gcc -C -E -x assembler-with-cpp

# This flag supresses some hyper-vigilant compilier warnings that have been deemed harmless. The list of warnings
# can be found is ./source/config.mk.warnings. If you are having some strange issues that you need to debug
# comment out DISABLE_PARANOIA and/or read the ./source/config.warnings file to allow the warnings if you think
# they may help you find the issue.
DISABLE_PARANOIA = YES

##########################################################################################
# Fortran flags

# External name mangling
UNDERSCORE = FORTRANSINGLEUNDERSCORE

# Flag to enable compilation of .f03 files (so far only intel compiler requires this)
F03_EXTENSION_FLAG = -free -Tf

# Enable OpenMP code
FPP += -D_OPENMP
F90FLAGS_all += -qopenmp

# ------------------------------- Compilation Targets ------------------------------------

# Debug

# -fpe-all:0

F90FLAGS_debug      = $(F90FLAGS_all) -O0 -debug all -traceback -check all,noarg_temp_created \
                      -warn all -fpe-all=0 -ftrapuv

# Production
F90FLAGS_production = $(F90FLAGS_all) -fast

# Profile Shark
# you cannot source profile with -ipo -static (which are turned on by -fast)
# After compilation you must generate the symbol table manually (the system gets confused
# because of the extra preprocessor, the C code does not require this)
# go to the directory where the binary is located and run:
# % dsymutil <binary-name>

F90FLAGS_profile    = $(F90FLAGS_all) -mdynamic-no-pic -O3 -xHost -no-prec-div \
                      -fp-model fast=2

##########################################################################################
# C flags

# -wd,981,1418,2259 \
#debug
CFLAGS_debug = -O0 -g -debug all -traceback -fp-trap-all=common -Wall -w3 -wd,981,1418,2259\
               -pedantic -std=c99

# profile
CFLAGS_profile = -std=c99 -mdynamic-no-pic -O3 -xHost -no-prec-div \
                 -fp-model fast=2

# production
CFLAGS_production = -fast

##########################################################################################
# Linker flags

# None required
#LDFLAGS =

##########################################################################################
# Libraries

# MPI

OPENMPI_ROOT = /opt/openmpi/3.0.0-intel

MPI_FCOMPILEFLAGS = $(shell $(OPENMPI_ROOT)/bin/mpif90 --showme:compile)
MPI_FLINKFLAGS    = $(shell $(OPENMPI_ROOT)/bin/mpif90 --showme:link)

# MPI supports MPI_IN_PLACE reduction
FPP += -D__HAS_MPI_IN_PLACE__

# HDF5

H5_ROOT = /opt/hdf5/1.10.1-intel

H5_FCOMPILEFLAGS = -I$(H5_ROOT)/include
H5_FLINKFLAGS    = -L$(H5_ROOT)/lib -lhdf5_fortran -lhdf5 -lz -lm

# Uncomment the following if HDF5 supports parallel MPIIO
# H5_HAVE_PARALLEL = 1
